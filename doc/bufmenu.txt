*bufmenu.txt*    Very simple buffer menu plugin

Author: Sneez <https://www.github.com/sneeznoodle>
License: GPL V3
    (Although I don't think most people would want to claim this code)

==============================================================================
CONTENTS                                                   *bufmenu.contents*

    1. Introduction .................................. |bufmenu.introduction|
        1.1 Disclaimer .................................... |bufmenu.warning|
        1.2 Usage ........................................... |bufmenu.usage|
    2. Configuration ....................................... |bufmenu.config|
        2.1 Deletion methods ............................. |bufmenu.deletion|
    3. API .................................................... |bufmenu.api|

==============================================================================
1. Introduction                                        *bufmenu.introduction*
This plugin is basically like an interactive version of :ls with slightly
less information and (hopefully) slightly prettier presentation. The goal is
to replace the usual experience of ":ls, forget buffer number, :ls again, then
run another command" with a simple menu that you can open and close buffers
from. Maybe my memory is just terrible and most people don't forget a two
digit number 4 seconds after it leaves the screen.

------------------------------------------------------------------------------
1.1 Disclaimer                                              *bufmenu.warning*
This is my first plugin and I will be the first to admit that I'm not very
good at this. The code is a complete mess and there will probably bug a ton of
bugs. I will do my best to fix them but I also am currently at college with a
whole bunch of other stuff bearing down on me so please bear with.

------------------------------------------------------------------------------
1.2 Usage                                                     *bufmenu.usage*
To install, use pretty much any plugin manager or clone the repo to somewhere
on your runtime path.
For example, with Lazy.nvim:
>lua
    {
        "sneeznoodle/bufmenu.nvim",
        -- Optional, adds filetype icons
        dependencies = { "nvim-tree/nvim-web-devicons" },
        -- Example options
        opts = {
            view = {
                width = 0.4,
                height = 0.35,
                relative_to_window = false,
                border = "rounded",
            },
        },
        -- Or if you don't want to change anything
        config = true,
    }
<

Initialise the plugin with:
>lua
    require("bufmenu").setup() -- Default settings
    -- OR
    require("bufmenu").setup {
        -- Options
    }
<
For default keybinds:
<A-f> to open or close the menu.
<F5> to manually refresh the menu (most actions, including opening the menu,
        do this automatically).
<cr> to open the selected buffer in the previous window and close the menu.
{count}<cr> to open the selected buffer in the window with win number {count}.
        Leaves the menu open.
<A-cr> to set the selected buffer as the |alternate-file| for the previous
        window.
{count}<A-cr> to set the selected buffer as the |alternate-file| for the
        window with win number {count}.
x to delete the selected buffer.
X to forcefully delete the selected buffer (discard changes).

The method used for deleting buffers can be changed (see |bufmenu.config|).

As for the visual information:
The first column (by default the little dots) indicates whether a buffer is
open in any windows or not (the dot is empty if the buffer is hidden).
The second column is the buffer number.
Next is the position in the buffer, in the form [current line]/[total lines].
Then the filetype icon and buffer name, and finally by an icon indicating
whether the buffer contains unsaved changes (`{+}` by default).


See |bufmenu.config| for defaults and available options.

==============================================================================
2. Configuration                                             *bufmenu.config*
Default configuration:
>lua
    {
        -- Set to false to disable all default keybinds
        use_default_keybinds = true,
        -- Delete buffers with the :bdelete[!] command
        -- When off, use a custom deletion method that preserves window layout
        -- See 2.1 for more details
        use_bdelete = true,
        -- Set a keybind to nil to disable it.
        keybinds = {
            -- Open the menu, or close if it's already open
            toggle_menu = "<A-f>",
            -- Manually refresh the contents of the menu
            refresh_menu = "<F5>",
            -- Delete the selected buffer
            delete_selected = "x",
            -- Force delete the selected buffer (discard changes)
            force_delete_selected = "X",
            -- Close the menu and switch to the selected buffer
            open_selected = "<cr>",
            -- Set the selected buffer as the alternate file
            -- Does not close the menu
            set_selected_as_altfile = "<a-cr>",
        },
        -- Options related to the popup float
        view = {
            -- The dimensions of the floating menu
            -- < 1: percentage of container
            -- > 1: fixed size
            width = 0.6,
            height = 0.5,
            -- The position of the menu
            -- < 0: centre of container
            -- > 0: fixed position
            row = -1,
            col = -1,
            -- Whether dimensions and position are relative to the active
            -- window when the menu is opened or the entire screen
            relative_to_window = true,
            -- See :h nvim_open_win() for possible values
            border = "single",
            title = "Buffer menu",
            title_pos = "center",
            -- Highlight group overrides for the menu (see :h 'winhighlight')
            winhighlight = {
                -- With default nvim colorscheme, add:

                -- "NormalFloat:Normal"

                -- Or the buffer names will be the same color as the
                -- background
            },
        },
        -- Options related to the contents of the menu
        menu = {
            -- The name of the unlisted buffer containing the menu
            -- Change if for some reason it conflicts with another plugin
            menu_buffer_name = "Bufmenu",
            -- The filetype of the menu buffer
            menu_buffer_filetype = "bufmenu",

            symbols = {
                -- The symbols used to represent shown and hidden buffers
                hidden = "",
                active = "",

                -- Appended to the buffer name if it contains unsaved changes
                -- Note the leading space
                modified = " {+}",

                -- Used for filetypes not recognised by nvim-web-devicons
                default_icon = "? "
            },
            -- Highlight group names or values for different parts of the menu
            -- Can be a string (name of hl group to link to) or a table
            -- (See :h nvim_set_hl, specifically the {val} argument)
            highlights = {
                -- The active/hidden icon and the buffer number
                -- Horrible name, sorry
                buffer_status = "Title",
                -- The position in the buffer
                buffer_position = "Question",
                -- The name of the buffer, including the modified icon
                buffer_name = "String",
            },

            -- Returns true if [bufnr] should appear on the menu
            filter = function(bufnr)
                return true
            end,
        },
    }

-------------------------------------------------------------------------------
2.1 Deletion methods                                       *bufmenu.deletion*
There are two ways to delete buffers with this plugin: the :bdelete command or
a new, custom method. The :bdelete command closes any windows containing the
deleted buffer, which messes up your window layout if you had changed it at
all. The new method just unloads and unlists the buffer (same as the command),
then sets all windows containing the deleted buffer to another buffer (or
creates a scratch buffer if the deleted buffer was the last one).

TL DR; :bdelete messes with your window layout but might be more stable.

==============================================================================
3. API                                                          *bufmenu.api*
Bufmenu now exposes a sort of API! This basically just means you can call the
functions that the mappings use from the "bufmenu" module. The main thing to
note is that functions with "selected" or "selected_buf" in their name will
fail if the menu is not focused.

float_toggle()
    Toggles the floating menu
    Returns true if the menu was opened, false if it was closed

float_is_open()
    Returns true if the floating menu is currently open

get_selected_bufnr()
    Returns the buffer number of the selected buffer, or -1 if the menu is not
    focused

refresh_menu()
    Refreshes the menu buffer, whether it is visible or not
	
open_selected_buf({winid})
    Opens the selected buffer in the window given by {winid}
    Returns false if {winid} is not valid or if menu is not focused, otherwise
    true

set_selected_as_alt({winid})
    Opens the selected buffer in the window given by {winid} and then switches
    back to the previous buffer, effectively setting the window's
    |alternate-file|
    Returns false if {winid} is not valid or if menu is not focused, otherwise
    true

delete_selected_buf({force})
    Deletes the selected buffer and makes all windows previously containing it
    instead contain a fallback buffer (currently either the first loaded and
    listed buffer, or a scratch buffer if none is found)
    Discards changes if {force} is true, otherwise fails on modified buffers
    Returns true if the buffer was successfully found and deleted, otherwise
    false
    Prints an error message if deletion fails

bdelete_selected_buf({force})
    Deletes the selected buffer with :bdelete (or :bdelete! if {force} is true)
    Closes the menu before while :bdelete to allow deletion of the open buffer
    (the command fails without error otherwise, possibly due to trying to
    close the window that the menu is relative to)
    Returns true if the buffer was successfully found and deleted, otherwise
    false
    Prints an error message if deletion fails

vim:tw=78:ft=help:expandtab:tabstop=4:shiftwidth=4
